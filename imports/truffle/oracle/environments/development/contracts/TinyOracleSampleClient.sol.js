// Factory "morphs" into a Pudding class.
// The reasoning is that calling load in each context
// is cumbersome.

(function() {

  var contract_data = {
    abi: [{"constant":false,"inputs":[],"name":"query","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"response","outputs":[{"name":"","type":"bytes"}],"type":"function"},{"constant":false,"inputs":[{"name":"id","type":"uint256"},{"name":"_response","type":"bytes"}],"name":"__tinyOracleCallback","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"query","type":"bytes"}],"name":"query","outputs":[],"type":"function"}],
    binary: "60606040526103e4806100126000396000f3606060405260e060020a60003504632c46b205811461003c5780637a7f01a714610089578063b29f731d146100e7578063ed815d8314610157575b005b61003a604080516020818101835260009091528151808301909252600b82527f68656c6c6f20776f726c64000000000000000000000000000000000000000000908201526103dd816101a2565b61029e6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103375780601f1061030c57610100808354040283529160200191610337565b61003a60048035906024803590810191013560006000905080600160a060020a0316637e9ba3016040518160e060020a0281526004018090506020604051808303816000876161da5a03f1156100025750506040515133600160a060020a03908116911614905061033f57610002565b61003a6004808035906020019082018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437509496505050505050505b6103e0816000600060006000915081600160a060020a031663321db4d46040518160e060020a0281526004018090506020604051808303816000876161da5a03f1156100025750505060405180519060200150905080600160a060020a031663ed815d83856040518260e060020a02815260040180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f1680156102735780820380516001836020036101000a031916815260200191505b50925050506020604051808303816000876161da5a03f1156100025750506040515195945050505050565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f1680156102fe5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b820191906000526020600020905b81548152906001019060200180831161031a57829003601f168201915b505050505081565b828260006000509190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106103a157828001813560ff19161785555b506103d19291505b808211156103d9576000815560010161038d565b82800160010185558215610385579182015b828111156103855782358260005055916020019190600101906103b3565b505050505050565b5090565b50565b505056",
    unlinked_binary: "60606040526103e4806100126000396000f3606060405260e060020a60003504632c46b205811461003c5780637a7f01a714610089578063b29f731d146100e7578063ed815d8314610157575b005b61003a604080516020818101835260009091528151808301909252600b82527f68656c6c6f20776f726c64000000000000000000000000000000000000000000908201526103dd816101a2565b61029e6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103375780601f1061030c57610100808354040283529160200191610337565b61003a60048035906024803590810191013560006000905080600160a060020a0316637e9ba3016040518160e060020a0281526004018090506020604051808303816000876161da5a03f1156100025750506040515133600160a060020a03908116911614905061033f57610002565b61003a6004808035906020019082018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437509496505050505050505b6103e0816000600060006000915081600160a060020a031663321db4d46040518160e060020a0281526004018090506020604051808303816000876161da5a03f1156100025750505060405180519060200150905080600160a060020a031663ed815d83856040518260e060020a02815260040180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f1680156102735780820380516001836020036101000a031916815260200191505b50925050506020604051808303816000876161da5a03f1156100025750506040515195945050505050565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f1680156102fe5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b820191906000526020600020905b81548152906001019060200180831161031a57829003601f168201915b505050505081565b828260006000509190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106103a157828001813560ff19161785555b506103d19291505b808211156103d9576000815560010161038d565b82800160010185558215610385579182015b828111156103855782358260005055916020019190600101906103b3565b505050505050565b5090565b50565b505056",
    address: "",
    generated_with: "2.0.9",
    contract_name: "TinyOracleSampleClient"
  };

  function Contract() {
    if (Contract.Pudding == null) {
      throw new Error("TinyOracleSampleClient error: Please call load() first before creating new instance of this contract.");
    }

    Contract.Pudding.apply(this, arguments);
  };

  Contract.load = function(Pudding) {
    Contract.Pudding = Pudding;

    Pudding.whisk(contract_data, Contract);

    // Return itself for backwards compatibility.
    return Contract;
  }

  Contract.new = function() {
    if (Contract.Pudding == null) {
      throw new Error("TinyOracleSampleClient error: Please call load() first before calling new().");
    }

    return Contract.Pudding.new.apply(Contract, arguments);
  };

  Contract.at = function() {
    if (Contract.Pudding == null) {
      throw new Error("TinyOracleSampleClient error: Please call load() first before calling at().");
    }

    return Contract.Pudding.at.apply(Contract, arguments);
  };

  Contract.deployed = function() {
    if (Contract.Pudding == null) {
      throw new Error("TinyOracleSampleClient error: Please call load() first before calling deployed().");
    }

    return Contract.Pudding.deployed.apply(Contract, arguments);
  };

  if (typeof module != "undefined" && typeof module.exports != "undefined") {
    module.exports = Contract;
  } else {
    // There will only be one version of Pudding in the browser,
    // and we can use that.
    window.TinyOracleSampleClient = Contract;
  }

})();
